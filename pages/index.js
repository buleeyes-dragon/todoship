/**
 * MY_SITE 部署后的网址
 */
const MY_SITE = "https://todoship.netlify.app";
import Head from "next/head";
// 导入 state
import { useState } from "react";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import cookie from "react-cookies";
import env from "../env";
import {
  Button,
  Checkbox,
  Grid,
  Row,
  Text,
  Tooltip,
  Modal,
  Input,
  Radio,
  Link,
  User,
} from "@nextui-org/react";
// import Test from "./Test";
// 将 @nextui-org/react 中 Button 重命名为 Btn 引入
import {
  Document,
  Calendar,
  Star,
  Setting,
  InfoCircle,
  Message,
  Folder,
} from "react-iconly";
import colorMode from "../todoapp.config";
import languages from "../language.config";
import Todo from "./Todo";
import TodoCalendar from "./TodoCalendar";
import ReactiveButton from "reactive-button";
let color = colorMode.lightColor;
export default function Home({
  posts,
  workflow,
  state,
  colorModeCookie,
  languageCookie,
  data_state,
}) {
  let secret = cookie.load("secret");
  // let colorModeCookie = cookie.load("colorModeCookie");

  let ifopen = true;
  // 如果没有secret，就跳转到登录页面
  if (!secret || data_state.success === false) {
    ifopen = true;
  } else {
    ifopen = false;
  }
  let ifwarning = false;

  if (data_state.success === false) {
    ifwarning = true;
  }
  const [loginstate, setLoginState] = useState("idle");

  const onClickHandler = () => {
    setLoginState("loading");
    setTimeout(() => {
      setLoginState("success");
    }, 2000);
  };
  // 创建状态用于记录当前的 active 的导航
  const [active, setActive] = useState(1);
  // 创建状态用于记录当前的颜色模式
  let md = colorModeCookie ? colorModeCookie : "light";
  const [colorMode, setColorMode] = useState(md);
  // 设置的可见性
  const [settingVisible, setSettingVisible] = useState(false);
  // 语言
  let lg = languageCookie === "zh" ? languages.Chinese : languages.English;
  const [language, setLanguage] = useState(lg);
  // loginopen
  const [loginOpen, setLoginOpen] = useState(ifopen);
  // mongoUri
  const [mongoUri, setMongoUri] = useState("");
  // sureVisible 确认是否要执行
  const [sureVisible, setSureVisible] = useState(false);
  const closesureHandler = () => {
    setSureVisible(false);
  };
  // 设置弹窗的可见性函数
  const handler = () => setSettingVisible(true);
  const closeHandler = () => {
    setSettingVisible(false);
  };
  const setSecret = (e) => {
    // localStorage.setItem("secret", mongoUri);
    // let a = localStorage.getItem("secret");
    cookie.save("secret", mongoUri, { path: "/" });
    setLoginOpen(false);
    window.location.reload();
  };
  // 响应未连接状态
  if (state === "404" || data_state.success === false) {
    return (
      <div className={styles.container}>
        <Head>
          <title>todoship</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div>
          <Modal
            scroll
            animated={false}
            fullScreen
            aria-labelledby="modal-title"
            aria-describedby="modal-description"
            open={loginOpen}
            className="rounded-none
          
           bg-gradient-to-r from-red-100 via-blue-100  to-red-100  bg-opacity-40"
          >
            <Modal.Body
              className="flex flex-col justify-center items-center w-full font-sans font-bold
          
          "
            >
              {/* 图片 */}
              <img
                src="https://jetzihan-img.oss-cn-beijing.aliyuncs.com/blog/tslogo-22.png"
                className="h-10"
                alt="Logo"
              />
              <Text
                h1
                size={60}
                css={{
                  textGradient: "45deg, $blue600 -20%, $red600 50%",
                }}
                className="logintext animate-pulse"
                weight="bold"
              >
                Let Todoship
              </Text>
              <Text
                h1
                size={60}
                css={{
                  textGradient: "45deg, $red600 -20%, $yellow600 100%",
                }}
                className="logintext animate-pulse"
                weight="bold"
              >
                Make Your Work
              </Text>
              <Text
                h1
                size={60}
                css={{
                  textGradient: "45deg, $yellow600 -20%, $red600 100%",
                }}
                className="logintext animate-pulse"
                weight="bold"
              >
                More Efficient
              </Text>
              <Text
                h1
                size={60}
                css={{
                  textGradient: "45deg, $red600 -20%, $blue600 100%",
                }}
                className="logintext animate-pulse"
                weight="bold"
              >
                And Enjoyable
              </Text>
              <Input
                shadow
                underlined
                className="w-96"
                labelPlaceholder="MongoDB URI"
                status="error"
                value={mongoUri}
                onChange={(e) => setMongoUri(e.target.value)}
              />
              <div className="flex justify-center">
                <Link
                  css={{ fontSize: "9px" }}
                  color="primary"
                  href="https://github.com/inannan423/jet-todo"
                >
                  请参阅官方文档 | Please refer to the official documentation.
                </Link>
              </div>
              <ReactiveButton
                buttonState={loginstate}
                onClick={setSecret}
                color={"red"}
                idleText={"Start"}
                loadingText={<>Loading</>}
                successText={<>Success</>}
                errorText={<>Error</>}
                rounded
                outline={false}
                shadow
                size={"large"}
                block={false}
                messageDuration={2000}
              />
            </Modal.Body>
          </Modal>
          <Modal
            scroll
            animated={false}
            fullScreen
            aria-labelledby="modal-title"
            aria-describedby="modal-description"
            open={ifwarning}
            closeButton
            className="rounded-none
            
           bg-gradient-to-r from-red-100 via-blue-100  to-red-100  bg-opacity-40"
          >
            <Modal.Body
              className="flex flex-col justify-center items-center w-full font-sans font-bold
          
          "
            >
              {/* 图片 */}
              <img
                src="https://jetzihan-img.oss-cn-beijing.aliyuncs.com/blog/todoship_404.png"
                className="h-60"
                alt="Logo"
              />
              <Text b size={15}>
                无法连接到数据库，请检查你的MongoURI是否正确。 Can not connect
                to the database, please check whether your MongoURI is correct.
              </Text>
              <ReactiveButton
                buttonState={loginstate}
                onClick={() => {
                  ifwarning = false;
                  // 清除cookie
                  cookie.remove("secret", { path: "/" });
                  window.location.reload();
                }}
                color={"red"}
                idleText={"Try Again"}
                loadingText={<>Loading</>}
                successText={<>Success</>}
                errorText={<>Error</>}
                rounded
                outline={false}
                shadow
                size={"large"}
              />
            </Modal.Body>
          </Modal>
        </div>
      </div>
    );
  } else {
    return (
      <div
        className={`h-screen flex font-mono font-semibold z-10  ${colorMode} bg-white dark:bg-gray-900`}
        // style={{fontFamily:language===languages.Chinese?"'Noto Serif SC', serif":""}}
      >
        <Head>
          <link
            href="https://fonts.googleapis.com/css2?family=Carter+One&family=Fredoka+One&family=Gentium+Plus:wght@700&family=Josefin+Sans:wght@200;400&family=Lily+Script+One&family=Lobster&family=Noto+Sans+SC&family=Noto+Serif+SC&family=Pacifico&family=Righteous&display=swap"
            rel="stylesheet"
          ></link>
          <title>Todoship</title>
        </Head>
        {/*装饰高斯模糊圆，blur 蓝绿色渐变*/}

        <Modal
          closeButton
          blur
          width="700px"
          aria-labelledby="modal-title"
          open={settingVisible}
          onClose={closeHandler}
          // 设置边框颜色
          // css={{borderColor:colorMode==="light"?"#000":"#fff"}}
          // 背景颜色
          style={{
            backgroundColor: colorMode === "light" ? "#f5f5f5" : "#383838",
          }}
        >
          <Modal.Header>
            <Text
              id="modal-title"
              b
              size={18}
              // 字体颜色
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              {language.setting.title}
            </Text>
          </Modal.Header>
          <Modal.Body>
            {/*<Text b size={18}>{language.setting.language}</Text>*/}
            <Text
              b
              size={15}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              {language.setting.language}
            </Text>
            <Radio.Group
              // label={language.setting.language}
              orientation="horizontal"
              color="error"
              defaultValue={["buenos-aires"]}
              // 根据值的不同改变语言
              onChange={(e) => {
                if (e === "Chinese") {
                  setLanguage(languages.Chinese);
                  // 写入cookie
                  cookie.save("languageCookie", "zh", { path: "/" });
                } else {
                  setLanguage(languages.English);
                  cookie.save("languageCookie", "en", { path: "/" });
                }
              }}
            >
              <Radio value="Chinese">
                <Text
                  style={{ color: colorMode === "light" ? "#000" : "#fff" }}
                  size={13}
                >
                  简体中文
                </Text>
              </Radio>
              <Radio value="English">
                <Text
                  style={{ color: colorMode === "light" ? "#000" : "#fff" }}
                  size={13}
                >
                  English
                </Text>
              </Radio>
            </Radio.Group>
            <Text
              b
              size={15}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              使用说明/Instruction
            </Text>
            <a
              href="https://github.com/inannan423/jet-todo"
              rel="noreferrer"
              target={"_blank"}
            >
              <ReactiveButton
                idleText="GitHub Repo"
                color="red"
                rounded
                shadow
                outline
                size="normal"
                width={120}
              />
            </a>{" "}
            <Text
              b
              size={15}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              切换账号/Switch accounts
            </Text>
            <ReactiveButton
              idleText="Exit"
              color="light"
              rounded
              shadow
              size="normal"
              width={120}
              onClick={() => {
                setSureVisible(true);
              }}
            />
            <Text
              b
              size={15}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              开发者/Developers
            </Text>
            <div className="w-full flex felx-col h-max">
              <a
                href="https://github.com/inannan423"
                rel="noreferrer"
                target={"_blank"}
              >
                <User
                  src="https://jetzihan-img.oss-cn-beijing.aliyuncs.com/blog/20221026202323.png"
                  name="Jetzihan"
                  bordered
                  css={{ color: colorMode === "light" ? "#000" : "#fff" }}
                />
              </a>
            </div>
            <Text
              size={12}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              Please star this repo if you like it!😘Thanks for your support!
            </Text>
            <Text
              size={12}
              style={{ color: colorMode === "light" ? "#000" : "#fff" }}
            >
              如果登陆成功但是无法显示数据，请检查你的MongoURI是否正确。并点击切换账号重新登陆。
              if login successfully but can not show data, please check your
              MongoURI and click switch accounts to login again.
            </Text>
          </Modal.Body>
          <Modal.Footer>
            <ReactiveButton
              idleText={language.setting.ok}
              rounded
              color="red"
              onClick={closeHandler}
            />
            <ReactiveButton
              idleText={language.setting.cancel}
              rounded
              color="light"
              onClick={closeHandler}
            />
          </Modal.Footer>
        </Modal>
        <aside
          className="relative min-w-max bg-opacity-90 h-full"
          aria-label="Sidebar"
          style={{ width: "10%" }}
        >
          {/*<div className="absolute top-0 left-0 w-96 h-96 bg-red-500 bg-opacity-50" style={{zIndex:0}}></div>*/}
          <div className="overflow-y-auto py-4 px-4 bg-gray-50 transition duration-600 ease dark:bg-gray-800 h-screen ">
            <a href="" className="flex items-center pl-2.5 mb-5">
              <img
                src="https://jetzihan-img.oss-cn-beijing.aliyuncs.com/blog/todoship-logo.svg"
                className="mr-2 h-6"
                alt="Logo"
              />
              <p
                style={{
                  fontFamily: "'Carter One', cursive",
                  fontSize: "18px",
                }}
                className="dark:text-gray-100 font-mono self-center font-normal whitespace-nowrap  text-gray-700 tracking-wide"
              >
                Todosh
              </p>{" "}
              <p
                style={{
                  fontFamily: "'Carter One', cursive",
                  fontSize: "18px",
                }}
                className="font-mono self-center font-normal whitespace-nowrap  text-red-400 tracking-wide"
              >
                i
              </p>
              <p
                style={{
                  fontFamily: "'Carter One', cursive",
                  fontSize: "18px",
                }}
                className="dark:text-gray-100 font-mono self-center font-normal whitespace-nowrap  text-gray-700 tracking-wide mr-5"
              >
                p
              </p>
            </a>
            <ul className="space-y-2 ">
              <li>
                <a
                  href="#"
                  // 当 active 等于 1 时，添加 active 类名
                  className={`flex  items-center pl-2.5 py-1.5 rounded-lg  bg-opacity-70 transition ease-in duration-300  hover:bg-red-50 dark:hover:bg-red-600 ${
                    active === 1 ? "bg-red-100 dark:bg-red-800" : ""
                  }`}
                  onClick={() => setActive(1)}
                >
                  <Document
                    className="transition ease-in-out  duration-300"
                    set="bulk"
                    primaryColor={
                      active === 1 ? color.activeColor : color.iconColor
                    }
                  />
                  <span className="ml-3 dark:text-gray-200">
                    {language.menu.todo}
                  </span>
                </a>
              </li>
              <li>
                <a
                  href="#"
                  // 当 active 等于 1 时，添加 active 类名
                  className={`flex  items-center pl-2.5 py-1.5 rounded-lg  bg-opacity-70 transition ease-in duration-300  hover:bg-red-50 dark:hover:bg-red-600 ${
                    active === 2 ? "bg-red-100 dark:bg-red-800" : ""
                  }`}
                  onClick={() => setActive(2)}
                >
                  <Folder
                    set="bulk"
                    className="transition ease-in-out  duration-300"
                    primaryColor={
                      active === 2 ? color.activeColor : color.iconColor
                    }
                  />
                  <span className="ml-3 dark:text-gray-200">
                    {language.menu.calendar}
                  </span>
                </a>
              </li>
            </ul>
            {/*  底部设置按钮*/}
            <div className="absolute bottom-0 left-0 w-full">
              <div className="flex items-center mb-5 justify-center">
                {/*<Tooltip content={"Settings"}>*/}
                <Setting
                  onClick={handler}
                  // 点击时按钮旋转360度
                  className="cursor-pointer transition ease-in-out duration-300 transform hover:rotate-180"
                  set="bulk"
                  primaryColor={color.iconColor}
                />
                <Star
                  // 点击切换颜色模式
                  onClick={() => {
                    if (colorMode === "light") {
                      setColorMode("dark");
                      cookie.save("colorModeCookie", "dark", { path: "/" });
                    } else if (colorMode === "dark") {
                      setColorMode("light");
                      cookie.save("colorModeCookie", "light", { path: "/" });
                    }
                  }}
                  className="ml-5 cursor-pointer transition ease-in-out duration-300 transform hover:opacity-50"
                  set="bulk"
                  primaryColor={color.iconColor}
                />
                {/*</Tooltip>*/}
              </div>
            </div>
          </div>
        </aside>

        <div
          className="w-full"
          style={{ fontSize: "30vh", whiteSpace: "nowrap", width: "90%" }}
        >
          {active === 1 ? (
            <Todo
              secret={secret}
              color={colorMode}
              posts={posts}
              lang={language}
            />
          ) : active === 2 ? (
            <TodoCalendar
              secret={secret}
              color={colorMode}
              posts={workflow}
              lang={language}
            />
          ) : (
            <div>404</div>
          )}
        </div>
        <Modal
          scroll
          animated={false}
          fullScreen
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
          open={loginOpen}
          className="rounded-none
          
           bg-gradient-to-r from-red-100 via-blue-100  to-red-100  bg-opacity-40"
        >
          <Modal.Body
            className="flex flex-col justify-center items-center w-full font-sans font-bold
          
          "
          >
            {/* 图片 */}
            <img
              src="https://jetzihan-img.oss-cn-beijing.aliyuncs.com/blog/tslogo-22.png"
              className="h-10"
              alt="Logo"
            />
            <Text
              h1
              size={60}
              css={{
                textGradient: "45deg, $blue600 -20%, $red600 50%",
              }}
              className="logintext animate-pulse"
              weight="bold"
            >
              Let Todoship
            </Text>
            <Text
              h1
              size={60}
              css={{
                textGradient: "45deg, $red600 -20%, $yellow600 100%",
              }}
              className="logintext animate-pulse"
              weight="bold"
            >
              Make Your Work
            </Text>
            <Text
              h1
              size={60}
              css={{
                textGradient: "45deg, $yellow600 -20%, $red600 100%",
              }}
              className="logintext animate-pulse"
              weight="bold"
            >
              More Efficient
            </Text>
            <Text
              h1
              size={60}
              css={{
                textGradient: "45deg, $red600 -20%, $blue600 100%",
              }}
              className="logintext animate-pulse"
              weight="bold"
            >
              And Enjoyable
            </Text>
            <Input
              shadow
              underlined
              className="w-96"
              labelPlaceholder="MongoDB URI"
              status="error"
              value={mongoUri}
              onChange={(e) => setMongoUri(e.target.value)}
            />
            <div className="flex justify-center">
              <Link
                css={{ fontSize: "5px" }}
                color="primary"
                href="https://github.com/inannan423/jet-todo"
              >
                请参阅官方文档 | Please refer to the official documentation.
              </Link>
            </div>
            <ReactiveButton
              buttonState={loginstate}
              onClick={setSecret}
              color={"red"}
              idleText={"Start"}
              loadingText={<>Loading</>}
              successText={<>Success</>}
              errorText={<>Error</>}
              rounded
              outline={false}
              shadow
              size={"large"}
              block={false}
              messageDuration={2000}
            />
          </Modal.Body>
        </Modal>
        {/* 确认执行的弹窗 */}
        <Modal
          closeButton
          blur
          scroll
          aria-labelledby="modal-title"
          open={sureVisible}
          onClose={closesureHandler}
          // 深浅色
          style={{
            backgroundColor: colorMode === "light" ? "#f5f5f5" : "#383838",
          }}
        >
          <Modal.Header>
            <Text
              b
              id="modal-title"
              className="tracking-normal font-sans text-red-500"
              size={18}
            >
              {language.warning}
            </Text>
          </Modal.Header>
          <Modal.Body>
            <div className="h-max scrollModal pb-2">
              <form className="scrollModal">
                <div className="m-1">
                  <Text
                    b
                    size={17}
                    style={{ color: colorMode === "light" ? "#000" : "#fff" }}
                  >
                    确认要退出登陆吗？退出登陆后你的记录不会被清除，但是请确保你能找回原有的
                    MongoDB URI。 Are you sure you want to log out? After
                    logging out, your records will not be cleared, but please
                    make sure you can find the original MongoDB URI.
                  </Text>
                </div>
              </form>
            </div>
          </Modal.Body>
          <Modal.Footer>
            <div className="flex w-full gap-3">
              <ReactiveButton
                idleText={language.todo.itemText.detailDelete}
                rounded
                shadow
                color="red"
                // type="submit"
                onClick={(e) => {
                  // 清除所有cookie，并且刷新页面
                  cookie.remove("secret");
                  cookie.remove("mongoUri");
                  cookie.remove("colorModeCookie");
                  cookie.remove("languageCookie");
                  window.location.reload();
                }}
              />
              {/* <div className="w-3"></div> */}
              <ReactiveButton
                idleText={language.todo.itemText.detailQuit}
                rounded
                shadow
                color="light"
                onClick={closesureHandler}
              />
            </div>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}

export async function getServerSideProps(ctx, context) {
  // get the current environment
  const cookies = ctx.req.headers.cookie;
  // 正则表达式匹配获取 secret= 后面的值
  // 正则表达式匹配获取 colorModeCookie= 后面的值

  let secret;
  let colorModeCookie;
  let languageCookie;
  if (cookies) {
    if (cookies.match(/secret=([^;]*)/)) {
      secret = cookies.match(/secret=([^;]*)/)[1];
    }
    if (cookies.match(/colorModeCookie=([^;]*)/)) {
      colorModeCookie = cookies.match(/colorModeCookie=([^;]*)/)[1];
    } else {
      colorModeCookie = "light";
    }
    if (cookies.match(/languageCookie=([^;]*)/)) {
      languageCookie = cookies.match(/languageCookie=([^;]*)/)[1];
    } else {
      languageCookie = "en";
    }
  }
  // 正则表达式匹配获取 languageCookie= 后面的值
  if (!secret) {
    let d_state;

    d_state = {
      success: true,
    };

    return {
      props: {
        data_state: d_state,
        posts: [],
        workflow: [],
        state: "404",
        // colorModeCookie: colorModeCookie,
      },
    };
  } else {
    let dev = process.env.NODE_ENV !== "production";
    let { DEV_URL, PROD_URL } = process.env;

    // request posts from api
    let response = await fetch(
      `${dev ? DEV_URL : MY_SITE}/api/posts?URL=${secret}`
    );
    // extract the data
    let data = await response.json();
    let response1 = await fetch(
      `${dev ? DEV_URL : MY_SITE}/api/workflow?URL=${secret}`
    );
    // extract the data
    let data1 = await response1.json();
    let state;
    // 如果网络未连接// 如果无法连接，返回 404
    if (response.status === 404 || response1.status === 404) {
      let d_state = {
        success: false,
      };
      return {
        props: {
          data_state: d_state,
          posts: [],
          workflow: [],
          state: "404",
          // colorModeCookie: colorModeCookie,
        },
      };
    } else if (!data) {
      state: "404";
    } else {
      state = "200";
    }
    // let d_state;
    // if (!data.success) {
    //   d_state = {
    //     success: true,
    //   };
    // } else {
    //   d_state = data;
    // }
    return {
      props: {
        data_state: data,
        posts: data["message"],
        workflow: data1["message"],
        state: state,
        colorModeCookie: colorModeCookie,
        languageCookie: languageCookie,
      },
    };
  }
}
